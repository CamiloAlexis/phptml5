<?php

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-08-29 at 15:50:31.
 */
class pQryCoreTest extends PHPUnit_Framework_TestCase {

    /**
     * @var pQryCore
     */

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers pQryCore::isSelector
     * @group  pQryteste
     */
    public function testIsSelector() {
        $this->assertFalse(pQryCore::isSelector('', $rules));
        $this->assertEmpty($rules);
        $this->assertTrue(pQryCore::isSelector('*', $rules));
        $this->assertNotEmpty($rules);
        $this->assertCount(1, $rules);
        $this->assertEquals('*', $rules[0]['tag']);
        $rules = array();
        $this->assertTrue(pQryCore::isSelector('.class', $rules));
        $this->assertEquals('class', $rules[0]['class']);
        $this->assertTrue(pQryCore::isSelector('*.class', $rules));
        $this->assertEquals('class', $rules[1]['class']);
        $this->assertEquals('*', $rules[1]['tag']);
        $this->assertTrue(pQryCore::isSelector('#id', $rules));
        $this->assertEquals('id', $rules[2]['id']);
        $this->assertTrue(pQryCore::isSelector('[type]', $rules));
        $this->assertCount(1, $rules[3]['attr']);
        $this->assertTrue(in_array('type', $rules[3]['attr']));
        $this->assertFalse(pQryCore::isSelector('[]', $rules));
        $this->assertTrue(pQryCore::isSelector('[type=text]', $rules));
        $this->assertArrayHasKey('type', $rules[4]['attr']);
        $this->assertEquals('text', $rules[4]['attr']['type']['value']);
        $this->assertEquals('=', $rules[4]['attr']['type']['op']);
        $this->assertTrue(pQryCore::isSelector('[type$=text]', $rules));
        $this->assertArrayHasKey('type', $rules[5]['attr']);
        $this->assertEquals('text', $rules[5]['attr']['type']['value']);
        $this->assertEquals('$=', $rules[5]['attr']['type']['op']);
        $this->assertTrue(pQryCore::isSelector(':hidden', $rules));
        $this->assertTrue(in_array('hidden', $rules[6]['pseudo']));
        $this->assertTrue(pQryCore::isSelector('div', $rules));
        $this->assertEquals('div', $rules[7]['tag']);
        
        $ops = array(
            array('blockquote','#meudiv','id','meudiv'),
            array('h1','.minhaclasse','class','minhaclasse'),
            array('span',':enabled','pseudo',array('enabled')),
            array('span','[name]','attr',array('name')),
            array('span','[name^=xyz]','attr',array('name'=>array('op'=>'^=','value'=>'xyz'))),
            array('span','[name^=xyz][title!="Alo"]','attr',array(
                        'name'=>array('op'=>'^=','value'=>'xyz'), 
                        'title'=>array('op'=>'!=','value'=>'Alo'))
                ),
        );
        $i = 8;
        foreach ($ops as $op) {
            $this->assertTrue(pQryCore::isSelector($op[0].$op[1], $rules));            
            $this->assertEquals($op[0], $rules[$i]['tag']);
            $this->assertEquals($op[3], $rules[$i][$op[2]]);
            $i++;
        }
        
        $conectors = array('descendant' => ' ', 'next' => ' + ', 'child' => ' > ', 'siblings' => ' ~ ');
        foreach ($conectors as $c => $v) {
            $crules = array();
            $this->assertTrue(pQryCore::isSelector('*'. $v .' p', $crules)); 
            $this->assertEquals(array('tag'=>'*',$c=>array('tag'=>'p')), $crules[0]);
            
            $this->assertTrue(pQryCore::isSelector('blockquote '. $v .' .p', $crules)); 
            $this->assertEquals(array('tag'=>'blockquote',$c=>array('class'=>'p')), $crules[1]);
            
            $this->assertTrue(pQryCore::isSelector('.test'. $v .'#id', $crules)); 
            $this->assertEquals(array('class'=>'test',$c=>array('id'=>'id')), $crules[2]);
            
            $this->assertTrue(pQryCore::isSelector('#i'. $v .'*', $crules)); 
            $this->assertEquals(array('id'=>'i',$c=>array('tag'=>'*')), $crules[3]);
            
            $this->assertTrue(pQryCore::isSelector('[name]'. $v .':input', $crules)); 
            $this->assertEquals(array('attr'=>array('name'),$c=>array('pseudo'=>array('input'))), $crules[4]);
            
            $this->assertTrue(pQryCore::isSelector('div:button'. $v .'#id[x!=y]', $crules)); 
            $this->assertEquals(array('tag'=>'div', 'pseudo'=>array('button'),$c=>array('id'=>'id', 'attr'=>array('x'=>array('op'=>'!=', 'value'=>'y')))), $crules[5]);
        }
        
        $this->assertTrue(pQryCore::isSelector('div:button > #id[x!=y] + [name][type=text]', $crules)); 
        $this->assertEquals(array(  'tag'=>'div', 
                                    'pseudo'=>array('button'),
                                    'child'=> array( 'id'=>'id', 
                                                     'attr'=>array('x'=>array('op'=>'!=', 'value'=>'y')),
                                                     'next'=>array(
                                                         'attr' => array(
                                                             'name',
                                                             'type' => array('op'=>'=', 'value'=>'text')
                                                         )
                                                     )
                                              )
                                  ), $crules[6]);
    }

    /**
     * @covers pQryCore::search
     * @todo   Implement testSearch().
     */
    public function testSearch() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

}
